{
  "name": "ddp.js",
  "version": "0.5.0",
  "description": "ddp javascript client",
  "main": "src/ddp.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./test/ddp.unit.js",
    "test-node": "./node_modules/mocha/bin/mocha -R nyan ./test/ddp.unit.js",
    "test-browser": "./node_modules/karma/bin/karma start test/karma.conf.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mondora/ddp.js"
  },
  "keywords": [
    "ddp",
    "meteor",
    "asteroid"
  ],
  "author": {
    "name": "Paolo Scanferla",
    "email": "paolo.scanferla@mondora.com",
    "url": "https://github.com/pscanf"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mondora/ddp.js/issues"
  },
  "homepage": "https://github.com/mondora/ddp.js",
  "devDependencies": {
    "coveralls": "^2.10.0",
    "gulp": "^3.6.2",
    "gulp-concat": "^2.2.0",
    "istanbul": "^0.2.10",
    "karma": "^0.12.14",
    "karma-chrome-launcher": "^0.1.3",
    "karma-coverage": "^0.2.1",
    "karma-firefox-launcher": "^0.1.3",
    "karma-mocha": "^0.1.3",
    "karma-safari-launcher": "^0.1.1",
    "lodash": "^2.4.1",
    "mocha": "^1.18.2",
    "mocha-lcov-reporter": "0.0.1",
    "should": "^3.2.0-beta1",
    "sinon": "^1.9.0"
  },
  "dependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/mondora/ddp.js.svg?branch=master)](https://travis-ci.org/mondora/ddp.js)\n[![Coverage Status](https://coveralls.io/repos/mondora/ddp.js/badge.png)](https://coveralls.io/r/mondora/ddp.js)\n[![Code Climate](https://codeclimate.com/github/mondora/ddp.js.png)](https://codeclimate.com/github/mondora/ddp.js)\n\n#ddp.js\n\nA javascript ddp client that runs both in the browser and in node.\n\n##Why\n\nThis is the foundation of a project I'm working on to decouple meteor's client and server sides. It allows the to connect through ddp to a meteor server, and use all of the wonderful facilities meteor provides.\n\nThe project was inspired by [ddp-browser-client](https://github.com/bmcmahen/ddp-browser-client), but I decided to re-implement the library from scratch to get a better understanding of the ddp protocol and to adapt it to run on node as well.\n\n##Install\n\nYou can install the package for server-side usage via npm:\n\n\tnpm install ddp.js\n\nFor client-side usage, you can use bower:\n\n\tbower install ddp.js\n\nor you can just clone the repository and add `ddp.js` to your project.\n\n\n##Example usage\n\n```javascript\nvar options = {\n\tendpoint: \"http://localhost:3000/websocket\",\n\tSocketConstructor: WebSocket\n};\nvar ddp = new DDP(options);\n\nddp.on(\"connected\", function () {\n\tconsole.log(\"Connected\");\n\n\tddp.sub(\"myCollection\");\n\tddp.on(\"added\", function (data) {\n\t\tconsole.log(data.collection);\n\t});\n\n\tvar myLoginParams = { ... };\n\tddp.method(\"login\", [myLoginParams], function (err, res) {\n\t\tif (err) throw err;\n\t\tconsole.log(\"Logged in!\");\n\t});\n});\n```\n\n##Tests\n\nTo run tests clone the repository\n\n    git clone https://github.com/mondora/ddp.js\n\tcd ddp.js\n\ninstall dependencies\n\n\tnpm install\n\nand run tests\n\n\tnpm run test-node\n\tnpm run test-browser\n\n\n##API\n\n\n\n\n\n###new DDP(options)\n\nReturns a new DDP instance.\n\nAvailable options are:\n\n- `endpoint`: the location of the websocket server. Its\n  format depends on the type of socket you are using.\n\n- `SocketConstructor`: the constructor function that will be\n  used to construct the socket. Meteor (currently the only\n  DDP server available) supports websockets and SockJS\n  sockets.  So, practically speaking, this means that on the\n  browser you can use either the browser's native WebSocket\n  constructor or the SockJS constructor provided by the\n  SockJS library.  On the server you can use whichever\n  library implements the websocket protocol (e.g.\n  faye-websocket).\n\n- `do_not_autoconnect`: pass true if you do not wish to have\n  the DDP instance to automatically connect itself to the\n  server upon instantiation.  In that case you'll need to\n  explicitly call the connect method to do so.\n\n- `do_not_autoreconnect`: pass true if you do not wish to\n  have the DDP instance try reconnecting itself.\n\n\n\n\n\n###DDP.connect()\n\nTries to connect to the DDP server.  To connect to a DDP\nserver a \"connect\" message needs to be sent.  This function\ndoes not send the message itself.  Instead, it opens a\nsocket connection to the server and delegates sending the\nmessage to the \"onopen\" event handler of the socket\ninstance.\n\n`connect` also sets the readyState property of the DDP instance\nto 0 (connecting).\nIf the user tries to send DDP messages before the connection\nis open (readyState equals 1), those messages get queued up\nand sent, in order, once the connection is established.\n\n\n\n\n\n###DDP.method(name, params, onResult, onUpdated)\n\nCalls a remote method and registers callbacks for the\n\"result\" and \"updated\" responses.\n\n- `name`: name of the method to call.\n\n- `params`: parameters to pass to the remote method. Pass an\n  empty array if you do not wish to pass any parameters.\n\n- `onResult`: callback for the \"result\" message\n  corresponding to the method invocation.\n\n- `onUpdated`: callback for the \"updated\" message\n  corresponding to the method invocation.\n\n\n\n\n\n###DDP.sub(name, params, onReady)\n\nSubscribes the current DDP instance to a server publication.\n\n- `name`: name of the server publication.\n\n- `params`: parameters to pass to the server publish\n  function. Pass an empty array if you do not wish to pass\n  any parameters.\n\n- `onReady`: callback for the \"ready\" message corresponding\n  to this subscription.\n\n\n\n\n\n###DDP.unsub(id)\n\nUnsubscribes the current DDP instance to a server\npublication to which it was subscribed.\n\n- `id`: id of the subscription.\n\n\n\n\n\n###DDP.on(name, handler)\n\nRegisters a callback for the specified event. Built-in\nevents are: connected, failed, error, added, removed,\nchanged, socket_close, socket_error.\n\n- `name`: name of the event.\n\n- `handler`: handler for the event.\n\n\n\n\n\n###DDP.off(name, handler)\n\nDeregisters a previously registered callback for the\nspecified event.\n\n- `name`: name of the event.\n\n- `handler`: handler for the event.\n\n\n\n\n\n##DDP events\n\n###\"error\"\n\n###\"connected\"\n\n###\"failed\"\n\n###\"socket_close\"\n\n###\"socket_error\"\n\n###\"added\"\n\n###\"changed\"\n\n###\"removed\"\n",
  "readmeFilename": "README.md",
  "_id": "ddp.js@0.5.0",
  "dist": {
    "shasum": "6caf1f75f5930183d5853879b7770e7e4ff7fa00"
  },
  "_from": "ddp.js@^0.5.0",
  "_resolved": "https://registry.npmjs.org/ddp.js/-/ddp.js-0.5.0.tgz"
}
